"" .vimrc
" TODO consider mason for language servers/linters/formatters?
" many things from http://bitbucket.org/sjl/dotfiles/src/tip/vim/
set nocompatible             " be iMproved

let is_neovim = has('nvim')
let plugin_dir = is_neovim ? expand('~/.local/share/nvim/site/autoload/plug.vim') : expand('~/.vim/autoload/plug.vim')

if empty(glob(plugin_dir))
  let get_vim_plug = 'silent !curl -fLo ' . shellescape(plugin_dir) . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  execute get_vim_plug
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Vim-plug ----------------------------------------------------------------- {{{

call plug#begin('~/.vim/plugged') "load vim-plug

Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'easymotion/vim-easymotion'
Plug 'fatih/vim-go',                    { 'do': ':GoInstallBinaries', 'for': 'go' }
Plug 'hashivim/vim-terraform',          { 'for': 'tf' }
Plug 'lambdalisue/fern.vim',            { 'on': 'Fern' }
Plug 'itchyny/lightline.vim'
Plug 'jeffkreeftmeijer/vim-dim'
Plug 'jparise/vim-graphql',             { 'for': ['graphql', 'graphqls', 'gql'] }
Plug 'junegunn/fzf',                    { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'liuchengxu/vista.vim'
Plug 'maximbaz/lightline-ale'
Plug 'mg979/vim-visual-multi'
Plug 'mgee/lightline-bufferline'
Plug 'puremourning/vimspector'
"Plug 'ryanoasis/vim-devicons'
Plug 'simnalamburt/vim-mundo',          { 'on': 'MundoToggle' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rails',                 { 'for': 'rb' }
Plug 'tpope/vim-surround'

" all the JS things
Plug 'yuezk/vim-js' | Plug 'HerringtonDarkholme/yats.vim' | Plug 'posva/vim-vue' | Plug 'maxmellon/vim-jsx-pretty'

" nvim specific
if is_neovim
  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
else
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings', {'do': ':LspInstallServer'}
endif

" plugins that require deno
if executable('deno')
  " let g:denops#debug = 1
  """ ddc
  Plug 'vim-denops/denops.vim'
  Plug 'Shougo/ddc.vim'
  Plug 'Shougo/pum.vim'

  " Install your UIs
  Plug 'Shougo/ddc-ui-native'

  " ddc sources
  " source is too old issue fix -https://github.com/statiolake/ddc-ale/pull/9
  Plug 'delphinus/ddc-tmux'
  Plug 'delphinus/ddc-treesitter'
  Plug 'LumaKernel/ddc-source-file'
  Plug 'matsui54/ddc-buffer'
  Plug 'Shougo/ddc-around'
  Plug 'Shougo/ddc-source-nvim-lsp'
  Plug 'Shougo/ddc-source-rg'
  "Plug 'shun/ddc-vim-lsp'
  Plug 'statiolake/ddc-ale'
  Plug 'tani/ddc-path'
  Plug 'uga-rosa/denippet.vim'

  " ddc filters and matchers
  Plug 'Shougo/ddc-filter-matcher_head'
  Plug 'tani/ddc-fuzzy'
  "Plug 'Shougo/ddc-sorter_rank'
  """" end ddc

else "alternatives when on a machine without deno
  echo "deno not found in $PATH, using fallback plugins"
  Plug 'honza/vim-snippets'
  Plug 'SirVer/ultisnips'
  if is_neovim
    " deoplete
    Plug 'nvim-lua/plenary.nvim' | Plug 'NTBBloodbath/rest.nvim'
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'editorconfig/editorconfig-vim' "editorconfig native in nvim
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
    Plug 'Shougo/deoplete.nvim'
  endif
endif

" gui specific plugins
if has('gui_running')
  Plug 'morhetz/gruvbox' " 'junegunn/seoul256.vim'
endif

call plug#end()
" }}}

" Basic options ------------------------------------------------------------ {{{
set autoindent                                    "keep indentation of current line
set encoding=utf-8
set expandtab                                     "converts tabs to spaces
set history=1000
set hlsearch                                      "highlight matches
set incsearch                                     "search as characters are entered
set ignorecase                                    "ignore case while searching
set laststatus=2                                  "always shows statusline / powerline
set lazyredraw                                    "only redraw when necessary
"set list!                                         "toggles list, default is off, enables whitespace characters
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮  "show unicode characters for tab,eol,and with wrap on
set modeline
set modelines=2                                   "use modelines at end of file for specifc settings
set mouse=
set mousehide                                     "hide mouse while editing
set noshowmode                                    "hides the mode for default statusline as its unnecessary with powerline/airline/lightline
set nowrap                                        "no word wrapping
set number                                        "show line numbers
set shiftwidth=2
set showbreak=↪
set showmatch
set smartcase                                     "case insensitive search if capital letters are used
set smarttab
set timeoutlen=350                                "delay for accepting key combination
set sts=2                                         "softtabstop as two spaces, used whren hitting tab or backspace to erase a tab
set ts=2                                          "tabs width as two spaces
set visualbell                                    "kill the noise
set tgc                                           "set termguicolors on

" backup and undo settings
set backup                                        "file backups enabled
set backupdir=~/.vim/tmp/backups//                "backup dir -- // saves full filepath with % as folder delimeter
set directory=~/.vim/tmp/swap//                   "temporary dir for swap files
set noswapfile                                    "disable swaps - were using backups
set undofile                                      "allow per file undo persistance
set undoreload=10000                              "max lines that can change outside vim and preserve history
set undodir=~/.vim/tmp/undo//                     "undo dir
set writebackup                                   "enabling temp backups during save

if !empty($EDITOR_MONOTONE)
  set background=light
  colorscheme komau-mod
  highlight Comment cterm=italic gui=italic
else
  colorscheme dim
endif

" set leader key -- originally \ -- now localleader
let mapleader = ","
let maplocalleader = "\\"

" disable arrow keys / ctrl + hjkl window swap
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" if undo and backup directories do not exist, make them
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

"hide ugly code past 120 characters on a line
"from https://kinbiko.com/vim/my-shiniest-vim-gems/
autocmd FileType if &ft!="txt,md" match ErrorMsg '\%>120v.\+' endif

if !is_neovim
  set pastetoggle=<F2>                              "when in insert mode, allow easy external clipboard pasting
endif

" }}}
" Folding ------------------------------------------------------------------ {{{

if is_neovim
  set foldmethod=expr
  set foldexpr=nvim_treesitter#foldexpr()
  set nofoldenable
else
  set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()
endif

" Make zO recursively open whatever fold we're in, even if it's partially open.
nnoremap zO zczO

" }}}
" Plugin-settings ---------------------------------------------------------- {{{

" ALE settings ------------------------------------------------------- {{{
let g:ale_completion_delay = 250                                    "delay before ale completion, def 100
let g:ale_disable_lsp = 'auto'                                      "disables ale-lsp features for those loaded by nvim-lspconfig, set to 1 to disable for all
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'            "define the format of the messages
let g:ale_echo_msg_warning_str = 'W'
let g:ale_lint_delay = 550                                          "delay before ale linting`, def 200

function! FormatToml(buffer) abort
  return {
  \  'command': 'taplo format -'
  \}
endfunction

execute ale#fix#registry#Add('taplo', 'FormatToml', ['toml'], 'taplo fmt for toml')

let g:ale_linters = {
\ 'cpp': ['clang'],
\ 'go': ['gofmt', 'golint'],
\ 'javascript': ['eslint'],
\ 'python': ['ruff', 'black'],
\ 'rust': ['analyzer'],
\ 'terraform': ['terraform'],
\ 'yaml': ['yaml-language-server'],
\}

let g:ale_fixers = {
\  '*': ['trim_whitespace'],
\ 'css': ['prettier'],
\ 'go': ['gofmt'],
\ 'javascript': ['eslint', 'remove_trailing_lines', 'trim_whitespace'],
\ 'python': ['black', 'trim_whitespace'],
\ 'rust': ['rustfmt'],
\ 'terraform': ['terraform', 'trim_whitespace'],
\ 'toml': ['taplo', 'trim_whitespace'],
\ 'yaml': ['trim_whitespace'],
\}

let g:ale_c_parse_makefile = 1
let g:ale_cpp_clang_executable = 'clang++'
let g:ale_cpp_clang_options = '-stdc=c++14 -Wall `sdl2-config --cflags --libs`'
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma --no-unused-vars --no-mixed-spaces-and-tabs'
let g:ale_python_black_options = '--line-length=120'
let g:ale_python_flake8_options = '--max-line-length=88 --extend-ignore=E203'
let g:ale_python_ruff_options = 'line-length 120 --ignore E203'
let g:ale_yaml_ls_config = {
\   'yaml': {
\     'schemaStore': {
\         'enable': v:true,
\     },
\    'customTags': [
\      '!reference scalar',
\      '!Reference scalar',
\      '!ref scalar',
\      '!Ref scalar',
\    ]
\  },
\}

" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
" valid options are current for the current cursor is on, disabled to disable, or default by removing the setting
let g:ale_virtualtext_cursor = 'disabled'

" checks for an open preview window - SO14300101
function! CheckPreviewWindow()
  for nr in range(1, winnr('$'))
    if getwinvar(nr, "&pvw") == 1
            " found a preview
            return 1
        endif
    endfor
    return 0
endfunction

function! ToggleALEPreview()
  if CheckPreviewWindow()
    :pclose
  else
    :ALEDetail
  endif
endfunction
" }}}

" ddc.vim settings ------------------------------------------------------- {{{

" ui must be set -- native: https://github.com/Shougo/ddc-ui-native
 "   \   'matchers': ['matcher_fuzzy', 'matcher_head'],
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', ['ale','around','buffer','denippet','file','lsp','path','rg','treesitter','tmux'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_fuzzy'],
    \   'converters': ['converter_fuzzy']
    \ },
    \ 'ale': {
    \   'mark': 'ALE',
    \   'minAutoCompleteLength': 4,
    \   'maxItems': 3,
    \ },
    \ 'around': {
    \   'mark': 'ARO',
    \   'maxItems': 5,
    \   'minAutoCompleteLength': 6,
    \   'timeout': 1000,
    \ },
    \ 'buffer': {
    \   'mark': 'BUF',
    \   'maxItems': 3,
    \   'minAutoCompleteLength': 5,
    \ },
    \ 'denippet': {
    \   'mark': 'SNIP',
    \   'maxItems': 3,
    \   'minAutoCompleteLength': 3,
    \ },
    \ 'file': {
    \   'mark': 'FILE',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \   'maxItems': 3,
    \   'minAutoCompleteLength': 6,
    \ },
    \ 'lsp': {
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
    \   'mark': 'LSP',
    \   'minAutoCompleteLength': 4,
    \ },
    \ 'path': {
    \   'mark': 'PATH',
    \   'maxItems': 3,
    \   'minAutoCompleteLength': 6,
    \ },
    \ 'rg': {
    \   'mark': 'RG',
    \   'minAutoCompleteLength': 4,
    \   'maxItems': 4,
    \ },
    \ 'tmux': {
    \   'mark' : 'TMUX',
    \   'minAutoCompleteLength': 5,
    \   'maxItems': 2,
    \ },
    \ 'treesitter': {
    \   'mark': 'TREE',
    \   'maxItems': 5,
    \   'minAutoCompleteLength': 5
    \ },
    \})

call ddc#custom#patch_global('sourceParams', {
    \ 'ale': {
    \   'cleanResultsWhitespace': v:false,
    \ },
    \ 'around': {
    \   'maxSize': 275,
    \   'minLength': 6,
    \ },
    \ 'buffer': {
    \   'requireSameFiletype': v:false,
    \   'limitBytes': 500000,
    \   'fromAltBuf': v:true,
    \   'forceCollect': v:true,
    \ },
    \   'path': {
    \     'cmd': ['fd', '--max-depth', '5'],
    \ }
    \})

call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ }})

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

" limit sources in vimrc to prevent hanging
" TODO figure out ow to tune these
autocmd FileType vim call ddc#custom#patch_buffer('sources', ['around', 'buffer', 'lsp'])

call ddc#enable()
" }}}

" denippet settings  ------------------------------------------------------- {{{
let snip_dir = expand("$HOME/.dotfiles/vim/custom-snips")

for file in split(glob(snip_dir . "/*.toml"), "\n")
  call denippet#load(file)
endfor

" Key mappings for denippet
inoremap <C-e> <Plug>(denippet-expand)
"inoremap <expr> <C-Tab> denippet#jumpable() ? '<Plug>(denippet-jump-next)' : '<C-Tab>'
"snoremap <expr> <C-Tab> denippet#jumpable() ? '<Plug>(denippet-jump-next)' : '<C-Tab>'
"inoremap <expr> <C-S-Tab> denippet#jumpable(-1) ? '<Plug>(denippet-jump-prev)' : '<C-S-Tab>'
"snoremap <expr> <C-S-Tab> denippet#jumpable(-1) ? '<Plug>(denippet-jump-prev)' : '<C-S-Tab>'
"  }}}

" deoplete settings ------------------------------------------------------- {{{
if 'g:loaded_deoplete'->exists()
  echo "hi"
  let g:deoplete#enable_at_startup = 1
  " Use ALE and also some plugin 'foobar' as completion sources for all code.
  call deoplete#custom#option('sources', {
  \ '_': ['ale'],
  \})
endif
" }}}

" EditorConfig settings ------------------------------------------------------- {{{
" only load if using the plugin for vim, neovim has native support
if 'let g:loaded_EditorConfig = 1'
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
  au FileType gitcommit let b:EditorConfig_disable = 1
endif
" }}}

" fern settings  ---------------------------------------------------------- {{{
let g:fern#renderer#default#leading = "│"
let g:fern#renderer#default#root_symbol = "┬ "
let g:fern#renderer#default#leaf_symbol = "├─ "
let g:fern#renderer#default#collapsed_symbol = "├─ "
let g:fern#renderer#default#expanded_symbol = "├┬ "

function! s:init_fern() abort
  nmap <buffer><nowait> <C-j> :<C-U>TmuxNavigateDown<cr>
  nmap <buffer><nowait> <C-k> :<C-U>TmuxNavigateUp<cr>
  nmap <buffer><nowait> <C-h> :<C-U>TmuxNavigateLeft<cr>
  nmap <buffer><nowait> <C-l> :<C-U>TmuxNavigateRight<cr>
  nmap <buffer> B <Plug>(fern-action-open:below)
  nmap <buffer> S <Plug>(fern-action-open:split)

  " Find and enter project root
  nnoremap <buffer><silent>
        \ <Plug>(fern-my-enter-project-root)
        \ :<C-u>call fern#helper#call(funcref('<SID>map_enter_project_root'))<CR>
  nmap <buffer><expr><silent>
        \ ^
        \ fern#smart#scheme(
        \   "^",
        \   {
        \     'file': "\<Plug>(fern-my-enter-project-root)",
        \   }
        \ )
endfunction

function! s:map_enter_project_root(helper) abort
  " NOTE: require 'file' scheme
  let root = a:helper.get_root_node()
  let path = root._path
  let path = finddir('.git/..', path . ';')
  execute printf('Fern %s', fnameescape(path))
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
" }}}

" fzf settings  ---------------------------------------------------------- {{{
if is_neovim
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif

" init config
let g:fzf_vim = {}
" preview window with 50% width or above if less than 70 columns
let g:fzf_vim.preview_window = ['hidden,right,50%,<70(up,40%)', 'ctrl-/']
" jump to existing window if possible
let g:fzf_vim.buffers_jump = 1

nnoremap <C-P> :Files <CR>
nnoremap <leader>p :Rg <CR>
nnoremap <leader>[ :Snippets <CR>

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --hidden --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)
" revist  https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
" }}}

" lightline.vim settings  ------------------------------------------------------- {{{
function LightlineFugitiveHead()
  let head = FugitiveHead()
  if head != ""
    let head = "\uf126 " .. head
  endif
  return head
endfunction

let g:lightline = {
  \  'colorscheme': 'seoul256',
  \  'active': {
  \    'left':[ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename' ]
  \    ],
  \    'right':[ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
  \              [ 'lineinfo' ],
	\              [ 'percent' ],
	\              [ 'fileformat', 'fileencoding', 'filetype']
  \   ]
  \  },
	\  'component': {
	\    'lineinfo': '%3l%-2v',
	\  },
  \  'component_function': {
  \    'fileformat': 'LightlineFileFormat',
  \    'filetype': 'LightlineFiletype',
  \    'filename': 'LightlineFilename',
  \    'gitbranch': 'LightlineFugitiveHead',
  \  },
  \ 'component_expand': {
  \   'buffers': 'lightline#bufferline#buffers',
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_infos': 'lightline#ale#infos',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok',
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel',
  \ },
  \ }
" shorten the vim mode display
let g:lightline.mode_map = {
  \ 'n' : 'N',
  \ 'i' : 'I',
  \ 'R' : 'R',
  \ 'v' : 'V',
  \ 'V' : 'VL',
  \ "\<C-v>": 'VB',
  \ 'c' : 'C',
  \ 's' : 'S',
  \ 'S' : 'SL',
  \ "\<C-s>": 'SB',
  \ 't': 'T',
  \ }
let g:lightline.separator = {
	\   'left': '', 'right': ''
  \}
let g:lightline.subseparator = {
	\   'left': '|', 'right': '|'
  \}
let g:lightline.tabline = {
  \   'left': [ ['buffers'] ],
  \   'right': [[]],
  \}
let g:lightline.tabline_separator = {
  \   'left': '', 'right': '|'
  \}
let g:lightline.tabline_subseparator = {
  \   'left': '', 'right': '|'
  \}
"
let s:palette = g:lightline#colorscheme#default#palette
"inactive text, inactive bg, active text, active background
if is_neovim "vim is very unhappy with color 236 at the moment, could nto find a quick fix for err 254
  let s:palette.tabline.tabsel = [ [ 3, 236, 253, 9 ] ]   "https://github.com/itchyny/lightline.vim/issues/207 might have clues to fix
endif
let s:palette.tabline.middle = s:palette.normal.middle
unlet s:palette

" remove the divider between filename and modified which is added by default lightline
function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

"show file path relative to git root using vim-fugitive
"function! LightlineFilename()
"  let root = fnamemodify(get(b:, 'git_dir'), ':h')
"  let path = expand('%:p') TODO pathshorten(expand("%:p"), 2)
"  if path[:len(root)-1] ==# root
"    return path[len(root)+1:]
"  endif
"  return expand('%')
"endfunction

" show file format on larger window widths
function! LightlineFileFormat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

" show file type information on larger window widths
function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

" lightline-bufferline settings
let g:lightline#bufferline#min_buffer_count = 2
let g:lightline#bufferline#enable_devicons = 1

" unicode icons for lightline-ale
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"

"enable the bufferline with lightline+lightline-bufferline
set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline
" }}}

"  netrw settings --------------------------------------------------- {{{
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_liststyle = 0
let g:netrw_winsize = 12
" }}}

"  nvim-lsp settings --------------------------------------------------- {{{
"  utilizes nvim-lspconfig currently
if is_neovim

lua << LSP_EOF
-- Setup language servers.
local lspconfig = require('lspconfig')
local capabilities = require("ddc_source_lsp").make_client_capabilities()

lspconfig.bashls.setup {}
lspconfig.denols.setup { capabilities = capabilities, }
lspconfig.pyright.setup {}
lspconfig.rust_analyzer.setup {}
lspconfig.terraformls.setup {}
lspconfig.tsserver.setup {}
lspconfig.yamlls.setup {
  settings = {
    yaml = {
      customTags = {
        "!Ref",
        "!ref",
        "!Reference",
        "!reference",
      },
      schemas = {
        ["https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json"] = "/*.k8s.yaml",
        ["https://raw.githubusercontent.com/instrumenta/kubernetes-json-schema/master/v1.18.0-standalone-strict/all.json"] = "~/.kube/*.yaml",
        ["https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json"] = "/.gitlab-ci*.yml",
        ["https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json"] = "/templates/.gitlab-ci*.yml",
      },
      schemaStore = {
        enable = true,
      },
    },
  }
}

-- set to debug if needed
vim.lsp.set_log_level('off')

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '<C-i>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    vim.keymap.set('n', '<space>wl', function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '<space>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
LSP_EOF

endif
" }}}

" nvim-treesitter settings --------------------------------------------------- {{{
if is_neovim

lua << TREE_EOF
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all"
  ensure_installed = {'bash', 'cpp', 'go', 'javascript', 'json', 'lua', 'python', 'query', 'regex', 'rust', 'ssh_config', 'terraform', 'vim', 'vimdoc', 'yaml'},

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = true,

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = false,

  -- List of parsers to ignore installing (or "all")
  -- ignore_install = { "javascript" },

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    -- disable = { "c", "rust" },
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },

  query_linter = {
      enable = true,
      use_virtual_text = true,
      lint_events = {"BufWrite", "CursorHold"},
      custom_captures = {
        -- Highlight TODO in red
        -- TODO ironically, needs fixing/tweaking
        ["todo"] = "TODO"
      },
      severity = {
        todo = "error",
      },
    },
}
TREE_EOF

endif

" }}}

" UltiSnips settings ------------------------------------------------------- {{{
let g:UltiSnipsExpandTrigger="<c-;>"
let g:UltiSnipsListSnippets="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" TODO setup a symlink / install script for custom snippets, no need for
"      second dir, just use UltiSnips or nips in .vim and .config/nvim
let g:UltiSnipsSnippetDirectories=["UltiSnips", "custom-snips"]

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" Vista Settings  ------------------------------------------------------- {{{
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_default_executive = 'ctags'
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 0
autocmd bufenter * if (winnr("$") == 1 && vista#sidebar#IsOpen()) | q | endif
" }}}

" Functions, Macris, and Keymaps -------------------------------------------------------------- {{{
" Clean trailing whitespace
nnoremap <leader>ww mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" toggle nerdtree display
"noremap <F4> :Vex<CR>
noremap <F4> :Fern . -toggle -drawer -stay<CR>

" show/hide tagbar/vista
nmap <F3> :Vista!!<CR>

nmap <F5> :call ToggleALEPreview()<CR>

" hide search highlighting
nnoremap <leader><space> :nohlsearch<CR>

" display vim undo tree
nnoremap <leader>u :MundoToggle<CR>

" split line similar to using J to join a line
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" disable help key
noremap  <F1> :checktime<cr>
inoremap <F1> <esc>:checktime<cr>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" use leader e or leader s to open or vsplit with filename in current directory
" leader E,S uses parent directory
nnoremap <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>E :e <C-R>=expand("%:p:h:h") . "/" <CR>
nnoremap <leader>s :vsplit <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>S :vsplit <C-R>=expand("%:p:h:h") . "/" <CR>

" yank the whole file to clipboard
nmap <leader>y :%y+<cr>

" vimspector
nnoremap <Leader>dd :call vimspector#Launch()<CR>
nnoremap <Leader>de :call vimspector#Reset()<CR>
nnoremap <Leader>dc :call vimspector#Continue()<CR>

nnoremap <Leader>dt :call vimspector#ToggleBreakpoint()<CR>
nnoremap <Leader>dT :call vimspector#ClearBreakpoints()<CR>

nmap <Leader>dk <Plug>VimspectorRestart
nmap <Leader>dh <Plug>VimspectorStepOut
nmap <Leader>dl <Plug>VimspectorStepInto
nmap <Leader>dj <Plug>VimspectorStepOver
" }}}

" File specific overrides -------------------------------------------------- {{{
autocmd BufNewFile,BufRead *.html.twig set syntax=html
augroup WrapLineForTextFiles
  autocmd!
  autocmd FileType md,markdown setlocal wrap spell spelllang=en_us
  autocmd FileType txt,text setlocal wrap spell spelllang=en_us
augroup END
autocmd FileType yaml,yml,toml setlocal list listchars+=lead:·
autocmd FileType rs setlocal ts=4 sts=4 shiftwidth=4
" }}}

" GUI-settings ------------------------------------------------------------- {{{
if has('gui_running')
  set guioptions-=egmt                            "hide the gui elements
  set guioptions-=T
  set guioptions-=m
  set guioptions-=L                               "oddly, only way to get scrollbars
  set guioptions-=r                               "properly hidden on left and right
  set background=dark
  set noerrorbells                                "stop flashing screen
  set novisualbell
  if (exists('plug'))                             " hack to prevent looking for colorscheme in embedded VScode and others
    colorscheme gruvbox                           "or seoul256
  endif
endif
" }}}

"vim:foldmethod=marker:foldlevel=0:
